// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Context;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240814180636_fourtCreateion")]
    partial class fourtCreateion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.BodyMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BodyFatPercentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("MuscleMass")
                        .HasColumnType("real");

                    b.Property<float>("WaistCircumference")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Date", "Weight");

                    b.ToTable("BodyMeasurements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyFatPercentage = 15f,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8951),
                            Date = new DateTime(2024, 7, 14, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8962),
                            MuscleMass = 35f,
                            WaistCircumference = 85f,
                            Weight = 70f
                        },
                        new
                        {
                            Id = 2,
                            BodyFatPercentage = 16f,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8970),
                            Date = new DateTime(2024, 6, 14, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8971),
                            MuscleMass = 34f,
                            WaistCircumference = 87f,
                            Weight = 68f
                        },
                        new
                        {
                            Id = 3,
                            BodyFatPercentage = 14f,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8973),
                            Date = new DateTime(2024, 8, 11, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8974),
                            MuscleMass = 36f,
                            WaistCircumference = 84f,
                            Weight = 72f
                        },
                        new
                        {
                            Id = 4,
                            BodyFatPercentage = 13.5f,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8978),
                            Date = new DateTime(2024, 8, 4, 21, 6, 36, 500, DateTimeKind.Local).AddTicks(8979),
                            MuscleMass = 35.5f,
                            WaistCircumference = 83f,
                            Weight = 71f
                        });
                });

            modelBuilder.Entity("Entities.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(5219),
                            Description = "Lower body strength exercise",
                            Difficulty = 0,
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(5226),
                            Description = "Upper body strength exercise",
                            Difficulty = 2,
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(5227),
                            Description = "Cardio exercise",
                            Difficulty = 2,
                            Name = "Running"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(5229),
                            Description = "Front crawl swimming style",
                            Difficulty = 1,
                            Name = "Freestyle Swimming"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(5230),
                            Description = "Breaststroke swimming style",
                            Difficulty = 2,
                            Name = "Breaststroke Swimming"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(5232),
                            Description = "Lower body and back strength exercise",
                            Difficulty = 3,
                            Name = "Deadlift"
                        });
                });

            modelBuilder.Entity("Entities.Models.ExerciseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExerciseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(705),
                            Description = "Strength training exercises",
                            Name = "Strength"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(711),
                            Description = "Cardio exercises",
                            Name = "Cardio"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(712),
                            Description = "Flexibility exercises",
                            Name = "Flexibility"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(713),
                            Description = "Swimming exercises and styles",
                            Name = "Swimming"
                        });
                });

            modelBuilder.Entity("Entities.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalCaloriesBurned")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6817),
                            Date = new DateTime(2024, 8, 4, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6821),
                            Duration = 60,
                            Notes = "Leg day workout",
                            TotalCaloriesBurned = 500f
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6826),
                            Date = new DateTime(2024, 8, 9, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6827),
                            Duration = 45,
                            Notes = "Upper body workout",
                            TotalCaloriesBurned = 400f
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6829),
                            Date = new DateTime(2024, 8, 7, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6829),
                            Duration = 40,
                            Notes = "Freestyle swimming session",
                            TotalCaloriesBurned = 300f
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2024, 8, 14, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6831),
                            Date = new DateTime(2024, 8, 11, 21, 6, 36, 501, DateTimeKind.Local).AddTicks(6831),
                            Duration = 50,
                            Notes = "Breaststroke swimming session",
                            TotalCaloriesBurned = 350f
                        });
                });

            modelBuilder.Entity("Entities.Models.WorkoutExercise", b =>
                {
                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<float?>("Distance")
                        .HasColumnType("real");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("WorkoutId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("WorkoutExercises");

                    b.HasData(
                        new
                        {
                            WorkoutId = 1,
                            ExerciseId = 1,
                            Reps = 10,
                            Sets = 4,
                            Weight = 80f
                        },
                        new
                        {
                            WorkoutId = 1,
                            ExerciseId = 3,
                            Distance = 5f
                        },
                        new
                        {
                            WorkoutId = 2,
                            ExerciseId = 2,
                            Reps = 12,
                            Sets = 3,
                            Weight = 60f
                        },
                        new
                        {
                            WorkoutId = 3,
                            ExerciseId = 4,
                            Distance = 1.5f
                        },
                        new
                        {
                            WorkoutId = 4,
                            ExerciseId = 5,
                            Distance = 2f
                        });
                });

            modelBuilder.Entity("Entities.Models.Exercise", b =>
                {
                    b.HasOne("Entities.Models.ExerciseCategory", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.WorkoutExercise", b =>
                {
                    b.HasOne("Entities.Models.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Entities.Models.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("Entities.Models.ExerciseCategory", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Entities.Models.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
